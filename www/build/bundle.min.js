/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	//config
	var configClient = __webpack_require__(1);

	// UI
	__webpack_require__(9);
	__webpack_require__(14);
	__webpack_require__(15);
	__webpack_require__(16);
	__webpack_require__(17);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(18);
	__webpack_require__(13);

	// Directives
	__webpack_require__(2);

	// Services
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('ui-layout-events', [
	    'ui.layout'
	])
	  .directive('uiLayout', function($timeout, $rootScope) {

	      var methods = ['updateDisplay',
	            'toggleBefore',
	            'toggleAfter',
	            'mouseUpHandler',
	            'mouseMoveHandler'],
	        timer;

	      function fireEvent() {
	          if(timer) $timeout.cancel(timer);
	          timer = $timeout(function() {
	              $rootScope.$broadcast('ui.layout.resize');
	              timer = null;
	          }, 0);
	      }

	      return {
	          restrict: 'AE',
	          require: '^uiLayout',
	          link: function(scope, elem, attrs, uiLayoutCtrl) {
	              angular.forEach(methods, function(method) {
	                  var oldFn = uiLayoutCtrl[method];
	                  uiLayoutCtrl[method] = function() {
	                      oldFn.apply(uiLayoutCtrl, arguments);
	                      fireEvent();
	                  };
	              });
	          }
	      };
	  });


	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.App',
	    [
	        // Angular
	        'ngRoute',

	        // Libs
	        'ui.layout',
	        'ui-layout-events',
	        'ngMdIcons',
	        'ngResource',
	        'ui.bootstrap',
	        'mgcrea.ngStrap',

	        // Views
	        'Autodesk.ADN.AngularView.View.Home',
	        'Autodesk.ADN.AngularView.View.Viewer',
	        'Autodesk.ADN.AngularView.View.Upload',
	        'Autodesk.ADN.AngularView.View.Extensions',
	        'Autodesk.ADN.AngularView.View.ExtensionEditor',

	        // UI
	        'Autodesk.ADN.AngularView.Navbar.AppNavbar',
	        'Autodesk.ADN.AngularView.Dialog.Models',
	        'Autodesk.ADN.AngularView.Dialog.Embed',
	        'Autodesk.ADN.AngularView.Dialog.Login',

	        // Directives
	        'Autodesk.ADN.Toolkit.UI.Directive.SpinningImg',

	        //Services
	        'Autodesk.ADN.AngularView.Service.Toolkit',
	        'Autodesk.ADN.AngularView.Service.AppState',
	        'Autodesk.ADN.Toolkit.ViewData.Service.ViewAndData',
	        'Autodesk.ADN.AngularView.Service.Resource.Extension',
	    ])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .config(
	      ['$routeProvider', '$locationProvider', 'ViewAndDataProvider',
	          function ($routeProvider, $locationProvider, ViewAndDataProvider)
	          {
	              $routeProvider.otherwise({redirectTo: '/home'});

	              //$locationProvider.html5Mode(true);

	              ViewAndDataProvider.setTokenUrl(
	                configClient.ApiURL + '/token');


	          }])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.App.Controller',
	        ['$scope', '$http', 'AppState', function($scope, $http, AppState) {

	            $scope.showNavbar = function() {

	                return AppState.showNavbar;
	            };

	            ;;

	            $http.get(configClient.ApiURL + '/auth/isAuthenticated').

	             success(function (user){

	                 AppState.isAuthenticated = user ? true : false;
	             }).

	             error(function(){

	                  AppState.isAuthenticated = false;
	             });


	            $scope.$on('app.onModal', function (event, data) {

	                switch(data.dlgId) {

	                    case '#loginDlg':

	                        if(!AppState.isAuthenticated) {

	                            $scope.$broadcast('app.onLogin', data);
	                        }

	                        break;

	                    case '#aboutDlg':

	                        $scope.$broadcast('app.onAbout', data);
	                        break;

	                    case '#modelsDlg':

	                        $scope.$broadcast('app.onModels', data);
	                        break;
	                }
	            });
	        }])





/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by leefsmp on 5/7/15.
	 */

	var configClient = {

	  staging: false,
	  host: '/node/ng-gallery',
	  viewAndDataUrl: 'https://developer.api.autodesk.com',
	  ApiURL: "http://" + window.location.host +'/node/ng-gallery/api'

	}

	module.exports = configClient;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	angular.module('Autodesk.ADN.Toolkit.UI.Directive.SpinningImg', []).

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    directive('adnSpinningImg', ['$interval', function($interval) {

	        function link(scope, element, attrs) {

	            var angle = 0.0;

	            function update() {

	                angle += parseFloat(attrs.step);

	                angle = angle % 360;

	                var value = "rotateY(" + angle + "deg)";

	                jQuery(element).css({
	                    "transform": value,
	                    "-moz-transform": value,
	                    "-webkit-transform": value,
	                    "-ms-transform": value,
	                    "-o-transform": value
	                });
	            }

	            $interval(function() {
	                update();
	            }, parseInt(attrs.period));
	        }

	        return {
	            restrict: 'E',
	            replace: true,
	            template: '<img height={{height}}width={{width}}src={{src}}style={{style}}>',
	            link: link
	        }
	    }]);



/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	angular.module('Autodesk.ADN.Toolkit.ViewData.Service.ViewAndData', []).

	    provider('ViewAndData', {

	        tokenUrl: "",

	        setTokenUrl: function(url) {

	            this.tokenUrl = url
	        },

	        $get: function() {

	            return {

	                client: new Autodesk.ADN.Toolkit.ViewData.AdnViewDataClient(
	                    config.viewAndDataUrl,
	                    this.tokenUrl)
	            }
	        }
	    });


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	angular.module('Autodesk.ADN.AngularView.Service.Resource.Extension', [])

	  .factory('Extension', ['$resource', function($resource) {

	    return $resource(config.host + '/api/extensions/:extensionId');
	  }]);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	angular.module('Autodesk.ADN.AngularView.Service.Resource.Thumbnail', [])

	  .factory('Thumbnail', ['$resource', function($resource) {

	    return $resource(config.host + '/api/thumbnails/:modelId');
	  }]);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	//config
	var configClient = __webpack_require__(1);

	angular.module('Autodesk.ADN.AngularView.Service.AppState', [])

	  .factory('AppState', [function() {

	    return {

	      showNavbar: true,

	      activeView: 'home',

	      //is user authenticated in session
	      isAuthenticated: false
	    }

	  }]);

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	angular.module('Autodesk.ADN.AngularView.Service.Toolkit', []).

	  provider('Toolkit', {

	    $get: function() {

	      return {

	        newGUID:  function() {

	          var d = new Date().getTime();

	          var guid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(
	            /[xy]/g,
	            function (c) {
	              var r = (d + Math.random() * 16) % 16 | 0;
	              d = Math.floor(d / 16);
	              return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
	            });

	          return guid;
	        },

	        createButton: function (id, className, tooltip, handler) {

	          var button = new Autodesk.Viewing.UI.Button(id);

	          button.icon.className = className;

	          button.icon.style.fontSize = "26px";

	          button.setToolTip(tooltip);

	          button.onClick = handler;

	          return button;
	        },

	        getGalleryControlGroup: function (viewer) {

	          var viewerToolbar = viewer.getToolbar(true);

	          var galleryControls = viewerToolbar.getControl(
	            'Autodesk.ADN.Gallery.ControlGroup');

	          if(!galleryControls) {

	            galleryControls = new Autodesk.Viewing.UI.ControlGroup(
	              'Autodesk.ADN.Gallery.ControlGroup');

	            viewerToolbar.addControl(galleryControls);
	          }

	          return galleryControls;
	        },

	        //@author SM@K<smali.kazmi@hotmail.com>
	        //@description website: smak.pk
	        mobile: function () {

	          var mobile = {

	            getUserAgent: function () {
	              return navigator.userAgent;
	            },
	            isAndroid: function () {
	              return this.getUserAgent().match(/Android/i);
	            },
	            isBlackBerry: function () {
	              return this.getUserAgent().match(/BlackBerry/i);
	            },
	            isIOS: function () {
	              return this.getUserAgent().match(/iPhone|iPad|iPod/i);
	            },
	            isOpera: function () {
	              return this.getUserAgent().match(/Opera Mini/i);
	            },
	            isWindows: function () {
	              return this.isWindowsDesktop() || this.isWindowsMobile();
	            },
	            isWindowsMobile: function () {
	              return this.getUserAgent().match(/IEMobile/i);
	            },
	            isWindowsDesktop: function () {
	              return this.getUserAgent().match(/WPDesktop/i);
	              ;
	            },
	            isAny: function () {

	              var foundAny = false;

	              var getAllMethods = Object.getOwnPropertyNames(mobile).filter(
	                function (property) {
	                  return typeof mobile[property] == 'function';
	                });

	              for (var index in getAllMethods) {

	                if (getAllMethods[index] === 'getUserAgent' ||
	                  getAllMethods[index] === 'isAny' ||
	                  getAllMethods[index] === 'isWindows') {
	                  continue;
	                }
	                if (mobile[getAllMethods[index]]()) {
	                  foundAny = true;
	                  break;
	                }
	              }

	              return foundAny;
	            }
	          }

	          return mobile;
	        }

	      }
	    }
	  });


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	angular.module('Autodesk.ADN.AngularView.Service.Resource.Model', [])

	.factory('Model', ['$resource', function($resource) {

	    return $resource(config.host + '/api/models/:id');
	}]);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////
	'use strict';

	//////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.View.Home',
	    [
	        'ngRoute',
	        'Autodesk.ADN.Toolkit.ViewData.Service.ViewAndData',
	        'Autodesk.ADN.AngularView.Service.Resource.Model',
	        'Autodesk.ADN.AngularView.Service.Resource.Thumbnail'
	    ])

	    ///////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////
	    .config(['$routeProvider', function($routeProvider) {

	            $routeProvider.when('/home', {
	                templateUrl: './js/ui/views/home/home.html',
	                controller: 'Autodesk.ADN.AngularView.View.Home.Controller'
	            });
	        }])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.View.Home.Controller',

	        ['$scope', 'ViewAndData', 'Model', 'Thumbnail', 'AppState',
	            function($scope, ViewAndData, Model, Thumbnail, AppState) {

	              ///////////////////////////////////////////////////////////////////
	              //
	              //
	              ///////////////////////////////////////////////////////////////////
	              $scope.searchFilter = function (model) {

	                  var regExp = new RegExp($scope.modelsFilterValue, 'i');

	                  return !$scope.modelsFilterValue ||
	                    regExp.test(model.name);
	              };

	              ///////////////////////////////////////////////////////////////////
	              //
	              //
	              ///////////////////////////////////////////////////////////////////
	              function loadModels() {

	                //fetches 10 models at a time

	                var limit = 10;

	                var skip = 0;

	                loadModelsRec(skip, limit)
	              }

	              function loadModelsRec(skip, limit) {

	                  Model.query({skip: skip, limit:limit}, function(models) {

	                    if(models.length) {

	                      models.forEach(function(model) {

	                          // set as default
	                          model.thumbnail = "img/adsk/adsk-128x128-32.png";

	                          $scope.models.push(model);

	                          Thumbnail.get({modelId:model._id},
	                            function(response){
	                                model.thumbnail =
	                                  "data:image/png;base64," + response.thumbnail.data;
	                            });


	                          var fileId = ViewAndData.client.fromBase64(model.urn);

	                          // role
	                          ViewAndData.client.getSubItemsWithProperties(
	                            fileId,
	                            { type: 'geometry'},
	                            function (items){
	                                if(items.length > 0) {
	                                    model.type = items[0].role;
	                                }
	                            },
	                            function (error) {

	                            }
	                          );

	                          //progress
	                          ViewAndData.client.getViewableAsync(
	                            fileId,
	                            function (viewable) {

	                                model.progress = viewable.progress;
	                            },
	                            function (error) {

	                            }, 'status');
	                      });

	                      loadModelsRec(skip + limit, limit);
	                    }
	                  });
	              }

	              ///////////////////////////////////////////////////////////////////
	              //
	              //
	              ///////////////////////////////////////////////////////////////////
	              ViewAndData.client.onInitialized(function() {

	                loadModels();
	              });

	              ///////////////////////////////////////////////////////////////////
	              //
	              //
	              ///////////////////////////////////////////////////////////////////
	              AppState.activeView = 'home';

	              AppState.showNavbar = true;

	              $scope.models = [];
	    }]);



/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////
	'use strict';

	//////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.View.Upload',
	  [
	    'ngRoute',
	  ])
	  
	  ///////////////////////////////////////////////////////////////////////
	  //
	  //
	  ///////////////////////////////////////////////////////////////////////
	  .config(['$routeProvider', function($routeProvider) {
	    
	    $routeProvider.when('/upload', {
	      templateUrl: './js/ui/views/upload/upload.html',
	      controller: 'Autodesk.ADN.AngularView.View.Upload.Controller'
	    });
	  }])
	  
	  ///////////////////////////////////////////////////////////////////////////
	  //
	  //
	  ///////////////////////////////////////////////////////////////////////////
	  .controller('Autodesk.ADN.AngularView.View.Upload.Controller',
	  
	  ['$scope', 'AppState',
	    function($scope, AppState) {

	      AppState.activeView = 'upload';

	      AppState.showNavbar = true;

	      if(!AppState.isAuthenticated) {

	        $scope.$emit('app.onModal', {
	          dlgId: '#loginDlg',
	          caption: 'This feature requires log in ...'
	        });
	      }


	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      var dropzone = document.getElementById('upload-dropzone');

	      dropzone.addEventListener('dragover', function (e) {
	        e.preventDefault();
	        e.currentTarget.classList.add('over-line');
	      });

	      dropzone.addEventListener('dragleave', function (e) {
	        e.preventDefault();
	        e.currentTarget.classList.remove('over-line');
	      });

	      dropzone.addEventListener('drop', function (e) {

	        e.stopPropagation();
	        e.preventDefault();

	        var file = e.dataTransfer.files[0];

	        console.log(file);

	        if($scope.selectedNode) {

	          createFileNode(file, $scope.selectedNode);
	        }
	        else {

	          createFileNode(file);
	        }

	        e.currentTarget.classList.remove('over-line');
	      });

	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      function createNode(label, parent) {

	        var node = {
	          label: label,
	          children: [],
	          parent: parent,
	          selectable: false
	        }

	        if (parent)
	          parent.children.push(node);

	        return node;
	      }

	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      function createFileNode(file, parent) {

	        var node = {
	          label: file.name,
	          children: [],
	          parent: parent,
	          selectable: true
	        }

	        if (parent) {

	          parent.children.push(node);
	        }
	        else {

	          $scope.nodes.push(node);
	        }

	        return node;
	      }

	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      $scope.onNodeSelected = function(node, selected) {

	        if($scope.selectedNode) {

	          $scope.selectedNode.selected = false;

	          $scope.selectedNode = null;
	        }

	        node.selected = selected && node.selectable;

	        if(selected && node.selectable) {

	          $scope.selectedNode = node;
	        }
	      }

	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      $scope.nodes = [];

	      $scope.expandedNodes = [];

	      $scope.treeOptions = {

	        multiSelection: false,
	        nodeChildren: "children",
	        dirSelectable: true,

	        injectClasses: {
	          "ul": "c-ul",
	          "li": "c-li",
	          "liSelected": "c-liSelected",
	          "iExpanded": "c-iExpanded",
	          "iCollapsed": "c-iCollapsed",
	          "iLeaf": "c-iLeaf",
	          "label": "c-label",
	          "labelSelected": "c-labelSelected"
	        }
	      }

	    }]);


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(22);
	__webpack_require__(23);
	__webpack_require__(24);
	__webpack_require__(25);

	var configClient = __webpack_require__(1);

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.View.Viewer',
	    [
	        'ngRoute',
	        'treeControl',
	        'Autodesk.ADN.AngularView.Control.Treeview',
	        'Autodesk.ADN.Toolkit.Viewer.Directive.Viewer',
	        'Autodesk.ADN.AngularView.Navbar.ViewerNavbar',
	        'Autodesk.ADN.AngularView.Service.Toolkit',
	        'Autodesk.ADN.AngularView.Service.Resource.Model'
	    ])

	    ///////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////
	    .config(['$routeProvider',

	        function($routeProvider) {

	            $routeProvider.when('/viewer', {
	                templateUrl: './js/ui/views/viewer/viewer.html',
	                controller: 'Autodesk.ADN.AngularView.View.Viewer.Controller'
	            });
	        }])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.View.Viewer.Controller',

	        ['$scope', '$timeout', 'Model', 'Toolkit', 'Extension', 'AppState',
	            function($scope, $timeout, Model, Toolkit, Extension, AppState) {

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                function loadFromId(id) {

	                    if(id.length) {

	                        Model.get({ id: id }, function(model) {
	                            $scope.docUrn = model.urn;
	                            $scope.currentModel = model;
	                        });
	                    }
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                function initializeView() {

	                    $scope.tokenUrl = configClient.ApiURL +
	                        (configClient.staging ? '/tokenstg' : '/token');

	                    $( window ).resize(function() {
	                        $timeout(function(){
	                            resize($scope.viewerLayoutMode);
	                        }, 500);
	                    });

	                    $scope.onGeometryLoaded = function (event) {

	                        var viewer = event.target;

	                        resize($scope.viewerLayoutMode);

	                        var ctrlGroup = Toolkit.getGalleryControlGroup(viewer);

	                        var viewerNavbarBtn = Toolkit.createButton(
	                          'Autodesk.ADN.Gallery.Viewer.Button.Navbar',
	                          'glyphicon glyphicon-modal-window',
	                          'Viewer Navbar',
	                          onViewerNavbarBtnClicked);

	                        ctrlGroup.addControl(viewerNavbarBtn);

	                        viewer.loadExtension(
	                          'Autodesk.ADN.Viewing.Extension.AnimationManager');

	                        viewer.loadExtension(
	                          'Autodesk.ADN.Viewing.Extension.ExtensionManager',
	                          {
	                              apiUrl: configClient.ApiURL + '/extensions',
	                              extensionsUrl: configClient.host + '/uploads/extensions'
	                          });

	                        viewer.loadExtension(
	                          'Autodesk.ADN.Viewing.Extension.StateManager',
	                          {
	                              apiUrl: configClient.ApiURL +
	                                '/states/' +
	                                $scope.currentModel._id
	                          });

	                        viewer.loadExtension(
	                          'Autodesk.ADN.Viewing.Extension.EmbedManager');

	                        $scope.$broadcast('viewer.geometry-loaded', {
	                            viewer: event.target
	                        });

	                        viewer.unloadExtension("Autodesk.Section");
	                    }

	                    $scope.onViewablePath = function(pathInfoCollection) {

	                        $scope.$broadcast('viewer.viewable-path-loaded', {
	                            pathInfoCollection: pathInfoCollection
	                        });

	                        if(pathInfoCollection.path3d.length > 0) {

	                            $scope.selectedPath.push(
	                                pathInfoCollection.path3d[0].path);

	                            return;
	                        }

	                        if(pathInfoCollection.path2d.length > 0) {

	                            $scope.selectedPath.push(
	                                pathInfoCollection.path2d[0].path);

	                            return;
	                        }
	                    }

	                    $scope.onViewerInitialized = function (viewer) {

	                        $scope.viewers[viewer.id] = viewer;

	                        $timeout(function(){
	                            resize($scope.viewerLayoutMode);
	                        }, 1000);

	                        viewer.addEventListener(
	                            Autodesk.Viewing.GEOMETRY_LOADED_EVENT,
	                            $scope.onGeometryLoaded);
	                    }

	                    function onViewerNavbarBtnClicked() {

	                        $scope.viewerNavbarVisible = !$scope.viewerNavbarVisible;

	                        showViewerNavbar($scope.viewerNavbarVisible);
	                    }

	                    $scope.onDestroy = function (viewer) {

	                        delete $scope.viewers[viewer.id];

	                        viewer.finish();
	                    }

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    function resize(mode) {

	                        var height = $('#viewer-container').height() - $scope.viewerNavbarHeight;

	                        var width = $('#viewer-container').width();

	                        var nb = $scope.selectedPath.length;

	                        switch(mode) {

	                            case 'VIEWER_LAYOUT_MODE_ROW_FITTED':

	                                    $scope.viewerConfig.height = height / nb + 'px';

	                                    $scope.viewerConfig.width = width + 'px';

	                                    $scope.viewerConfig.splitterHeight =
	                                        $scope.viewerConfig.splitterSize + 'px';

	                                    $scope.viewerConfig.splitterWidth = width + 'px';

	                                break;

	                            case 'VIEWER_LAYOUT_MODE_ROW':

	                                $scope.viewerConfig.height = height + 'px';

	                                $scope.viewerConfig.width = width - 15 + 'px';

	                                $scope.viewerConfig.splitterHeight =
	                                    $scope.viewerConfig.splitterSize + 'px';

	                                $scope.viewerConfig.splitterWidth = width + 'px';

	                                break;

	                            case 'VIEWER_LAYOUT_MODE_COLUMN_FITTED':

	                                $scope.viewerConfig.height = height + 'px';

	                                $scope.viewerConfig.width = width / nb +
	                                    (1/nb - 1) * $scope.viewerConfig.splitterSize + 'px';

	                                $scope.viewerConfig.splitterHeight = height + 'px';

	                                $scope.viewerConfig.splitterWidth =
	                                    $scope.viewerConfig.splitterSize + 'px';

	                                break;
	                        }

	                        for(var id in $scope.viewers) {

	                            $scope.viewers[id].resize();
	                        }
	                    }

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    $scope.$on('ui.layout.resize', function (event, data) {

	                        resize($scope.viewerLayoutMode);
	                    });

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    $scope.$on('viewer.viewable-path-selected',

	                        function (event, data) {

	                            $scope.selectedPath = data.selectedItems;
	                        });

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    $scope.$on('viewer.layout-mode-changed',

	                        function (event, data) {

	                            $scope.viewerLayoutMode = data.selectedLayoutMode;

	                            resize($scope.viewerLayoutMode);
	                        });

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    $scope.$on('viewer.search-input-modified',

	                      function (event, data) {

	                          for(var id in $scope.viewers) {

	                              var viewer = $scope.viewers[id];

	                              viewer.isolateById([]);

	                              viewer.search(data.searchInput, function(ids){

	                                  viewer.isolateById(ids);
	                              });
	                          }
	                      });

	                    ///////////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    //////////////////////////////////////////////////////////////////////
	                    function showViewerNavbar(visible) {

	                        $scope.viewerNavbarVisible = visible;

	                        $scope.viewerNavbarHeight = visible ? 50 : 0;

	                        $timeout(function(){
	                            resize($scope.viewerLayoutMode);
	                        }, 500);
	                    }

	                    showViewerNavbar(false);

	                    showAppNavbar(!Toolkit.mobile().isAny());

	                    var id = Autodesk.Viewing.Private.getParameterByName("id");

	                    if(id.length) {

	                        loadFromId(id);
	                    }
	                    else {

	                        $scope.$emit('app.onModal', {
	                            dlgId: '#modelsDlg',
	                            source: '/viewer'
	                        });
	                    }
	                }

	                ///////////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////////
	                function showAppNavbar(visible) {

	                    AppState.showNavbar = visible;

	                    $scope.viewerStyle = (visible ? "top:64px" : "top:0px");
	                }

	                ///////////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////////
	                $scope.viewerLayoutMode = 'VIEWER_LAYOUT_MODE_ROW_FITTED';

	                AppState.activeView = 'viewer';

	                $scope.selectedPath = [];

	                $scope.viewers = {};

	                $scope.viewerContainerConfig = {

	                    environment: 'AutodeskProduction'
	                    //environment: 'AutodeskStaging'
	                }

	                $scope.viewerConfig = {

	                    viewerType: 'GuiViewer3D',
	                    //viewerType: 'Viewer3D'

	                    width: '100%',
	                    height: '100px',
	                    splitterSize: 2,
	                    splitterWidth: '2px',
	                    splitterHeight: '2px'
	                }

	                ///////////////////////////////////////////////////////////////////////
	                //
	                //
	                //////////////////////////////////////////////////////////////////////
	                initializeView();
	            }]);

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////
	'use strict';

	//////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.View.Extensions',
	  [
	    'ngRoute',
	  ])

	  ///////////////////////////////////////////////////////////////////////
	  //
	  //
	  ///////////////////////////////////////////////////////////////////////
	  .config(['$routeProvider', function($routeProvider) {

	    $routeProvider.when('/extensions', {
	      templateUrl: './js/ui/views/extensions/extensions.html',
	      controller: 'Autodesk.ADN.AngularView.View.Extensions.Controller'
	    });
	  }])

	  ///////////////////////////////////////////////////////////////////////////
	  //
	  //
	  ///////////////////////////////////////////////////////////////////////////
	  .controller('Autodesk.ADN.AngularView.View.Extensions.Controller',

	  ['$scope', 'Extension', 'AppState',
	    function($scope, Extension, AppState) {

	      ///////////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////////
	      function createNode(label, parent) {

	        var node = {
	          label: label,
	          children: [],
	          parent: parent,
	          selectable: false
	        }

	        if (parent)
	          parent.children.push(node);

	        return node;
	      }

	      function createExtensionNode(extension, parent) {

	        var node = {
	          label: extension.name,
	          children: [],
	          parent: parent,
	          selectable: false
	        }

	        if (parent)
	          parent.children.push(node);

	        return node;
	      }

	      ///////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////
	      function loadExtensions() {

	        $scope.extensionNodes = [];

	        Extension.query(function (extensions) {

	          var root = {
	            label: 'Extensions',
	            children:[]
	          }

	          $scope.extensionNodes.push(root);

	          extensions.forEach(function (extension) {

	            createExtensionNode(extension, root);
	          });
	        });
	      }

	      ///////////////////////////////////////////////////////////////////
	      //
	      //
	      ///////////////////////////////////////////////////////////////////
	      AppState.activeView = 'extensions';

	      AppState.showNavbar = true;

	      $scope.extensionNodes = [];

	      $scope.expandedExtensionNodes = [];

	      $scope.treeOptions = {

	        multiSelection: true,
	        nodeChildren: "children",
	        dirSelectable: true,

	        injectClasses: {
	          "ul": "c-ul",
	          "li": "c-li",
	          "liSelected": "c-liSelected",
	          "iExpanded": "c-iExpanded",
	          "iCollapsed": "c-iCollapsed",
	          "iLeaf": "c-iLeaf",
	          "label": "c-label",
	          "labelSelected": "c-labelSelected"
	        }
	      }

	      if(!AppState.isAuthenticated) {
	        $scope.$emit('app.onModal', {
	          dlgId: '#loginDlg',
	          caption: 'This feature requires log in ...'
	        });
	      }

	      loadExtensions();

	    }]);



/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	__webpack_require__(24);

	var config = __webpack_require__(1);

	angular.module('Autodesk.ADN.AngularView.View.ExtensionEditor',
	    [
	        'ngRoute',
	        'js-data',
	        'ngSanitize',
	        'ui.select',
	        'ui-layout-events',
	        'Autodesk.ADN.AngularView.Service.Toolkit',
	        'Autodesk.ADN.Toolkit.Viewer.Directive.Viewer',
	        'Autodesk.ADN.AngularView.Service.Resource.Model'
	    ])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .config(['$routeProvider', function($routeProvider) {
	      $routeProvider.when('/extension-editor', {
	          templateUrl: './js/ui/views/extension-editor/extension-editor.html',
	          controller: 'Autodesk.ADN.AngularView.View.ExtensionEditor.Controller'
	      });
	    }])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .factory('store', function () {

	        var store = new JSData.DS();

	        store.registerAdapter(
	            'localstorage',
	            new DSLocalStorageAdapter(),
	            { default: true });

	        return store;
	    })
	    .factory('ExtensionSvc', function (store) {
	        return store.defineResource('extension');
	    })
	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.View.ExtensionEditor.Controller',

	        ['$scope', '$http', '$sce', 'ExtensionSvc', 'Model', 'Toolkit', 'AppState',
	            function($scope, $http, $sce, ExtensionSvc, Model, Toolkit, AppState) {

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function loadFromId(id) {

	            if(id.length) {

	                Model.get({ id: id }, function(model) {
	                    $scope.docUrn = model.urn;
	                });
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function initializeViewer() {

	            $scope.tokenUrl = config.ApiUrl +
	                (config.staging ? '/tokenstg' : '/token');

	            $scope.viewerContainerConfig = {

	                environment: 'AutodeskProduction'
	            }

	            $scope.viewerConfig = {

	                viewerType: 'GuiViewer3D'
	                //viewerType: 'Viewer3D'
	            }

	            var id = Autodesk.Viewing.Private.getParameterByName("id");

	            if(id.length) {

	                loadFromId(id);
	            }
	            else {

	                $scope.$emit('app.onModal', {
	                    dlgId: '#modelsDlg',
	                    source: '/extension-editor'
	                });
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onViewablePath = function (pathInfoCollection) {

	            $scope.$broadcast('viewer.viewable-path-loaded', {
	                pathInfoCollection: pathInfoCollection
	            });

	            if (pathInfoCollection.path3d.length > 0) {

	                $scope.selectedPath =
	                  pathInfoCollection.path3d[0].path;

	                return;
	            }

	            if (pathInfoCollection.path2d.length > 0) {

	                $scope.selectedPath =
	                  pathInfoCollection.path2d[0].path;

	                return;
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onViewerInitialized = function (viewer) {

	            $scope.viewer = viewer;

	            $scope.viewer.resize();
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onDestroy = function (viewer) {

	            viewer.finish();
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.$on('ui.layout.resize', function (event, data) {

	            resize();
	        });

	        function resize() {

	            $('#viewer-extension-editor').height(
	              $('#viewer-extension-editor-container').height());

	            if($scope.viewer) {
	                $scope.viewer.resize();
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function initializeEditor() {

	            $scope.editor = ace.edit("dynamic-editor");
	            $scope.editor.setTheme("ace/theme/chrome");
	            $scope.editor.getSession().setMode("ace/mode/javascript");

	            $scope.onResetEditor();

	            ExtensionSvc.findAll().then(function (extensions) {

	                $scope.extensions = extensions;

	                if($scope.extensions.length === 0) {

	                    ExtensionSvc.create({code:''});
	                }
	                else {

	                    var code = $scope.extensions[0].code;

	                    console.log($scope.extensions[0])

	                    $scope.editor.setValue(code, 1);
	                }
	            });

	            ExtensionSvc.bindAll({}, $scope, 'extensions');

	            $scope.editor.on('input', function() {

	                var code = $scope.editor.getValue();

	                $scope.extensions[0].code = code;

	                ExtensionSvc.update(
	                  $scope.extensions[0].id,
	                  {
	                      label: 'edit',
	                      name: 'edit',
	                      code:code
	                  })
	            });
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onResetEditor = function() {

	            var defaultCode = [

	                '///////////////////////////////////////////////////////////////////////',
	                '// Basic viewer extension',
	                '//',
	                '///////////////////////////////////////////////////////////////////////',
	                'AutodeskNamespace("Autodesk.ADN.Viewing.Extension");',
	                '',
	                'Autodesk.ADN.Viewing.Extension.Basic = function (viewer, options) {',
	                '',
	                '   Autodesk.Viewing.Extension.call(this, viewer, options);',
	                '',
	                '   var _this = this;',
	                '',
	                '   _this.load = function () {',
	                '',
	                '       alert("Autodesk.ADN.Viewing.Extension.Basic loaded");',
	                '',
	                '       viewer.setBackgroundColor(255,0,0, 255,255, 255);',
	                '',
	                '       return true;',
	                '   };',
	                '',
	                '   _this.unload = function () {',
	                '',
	                '       viewer.setBackgroundColor(3,4,5, 250, 250, 250);',
	                '',
	                '       alert("Autodesk.ADN.Viewing.Extension.Basic unloaded");',
	                '',
	                '       Autodesk.Viewing.theExtensionManager.unregisterExtension(',
	                '           "Autodesk.ADN.Viewing.Extension.Basic");',
	                '',
	                '       return true;',
	                '   };',
	                '};',
	                '',
	                'Autodesk.ADN.Viewing.Extension.Basic.prototype =',
	                '   Object.create(Autodesk.Viewing.Extension.prototype);',
	                '',
	                'Autodesk.ADN.Viewing.Extension.Basic.prototype.constructor =',
	                '   Autodesk.ADN.Viewing.Extension.Basic;',
	                '',
	                'Autodesk.Viewing.theExtensionManager.registerExtension(',
	                '   "Autodesk.ADN.Viewing.Extension.Basic",',
	                '   Autodesk.ADN.Viewing.Extension.Basic);'
	              ];

	            $scope.editor.setValue(defaultCode.join('\n'), 1);
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function extractExtensionIds(str) {

	            String.prototype.replaceAll = function (find, replace) {
	                var str = this;
	                return str.replace(new RegExp(
	                        find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'g'),
	                    replace);
	            };

	            String.prototype.trim = function () {
	                return this.replace(/^\s+/, '').replace(/\s+$/, '');
	            };

	            var extensions = [];

	            var start = 0;

	            while(true) {

	                start = str.indexOf(
	                    'theExtensionManager.registerExtension',
	                    start);

	                if(start < 0) {

	                    return extensions;
	                }

	                var end = str.indexOf(',', start);

	                var substr = str.substring(start, end);

	                var ext = substr.replaceAll(
	                  'theExtensionManager.registerExtension', '').
	                    replaceAll('\n', '').
	                    replaceAll('(', '').
	                    replaceAll('\'', '').
	                    replaceAll('"', '');

	                extensions.push(ext.trim());

	                start = end;
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function extractExtensionNameFromId(extId) {

	            function UpperCaseArray(input) {
	                var result = input.replace(/([A-Z]+)/g, ",$1").replace(/^,/, "");
	                return result.split(",");
	            }

	            var idComponents = extId.split('.');

	            var nameComponents =
	              UpperCaseArray(idComponents[idComponents.length - 1]);

	            var name = '';

	            nameComponents.forEach(function(nameComp){
	                name += nameComp + ' ';
	            });

	            return name;
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onLoadExtension = function() {

	            var code = $scope.editor.getValue();

	            var extIds = extractExtensionIds(code);

	            var res = eval(code);

	            if(res) {

	                loadExtensions(extIds);
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        $scope.onUnloadExtension = function() {

	            $scope.loadedExtIds.forEach(function(extId) {

	                $scope.viewer.unloadExtension(extId);
	            });

	            $scope.loadedExtIds = [];
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        function loadExtensions(extIds) {

	            if($scope.viewer) {

	                extIds.forEach(function(extId) {

	                    $scope.viewer.loadExtension(extId);

	                    $scope.loadedExtIds.push(extId);
	                });
	            }
	        }

	        ///////////////////////////////////////////////////////////////////
	        //
	        //
	        ///////////////////////////////////////////////////////////////////
	        AppState.activeView = 'extension-editor';

	        $scope.loadedExtIds = [];

	        $scope.viewer = null;

	        $scope.height = 500;

	        initializeViewer();

	        initializeEditor();
	    }]);





/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Dialog.About',[])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Dialog.About.Controller',

	        ['$scope', function($scope) {

	            $scope.author = {
	                name: "Philippe Leefsma",
	                href: "http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html"
	            };

	            $scope.$on('app.onAbout', function (event, data) {

	                $('#aboutDlg').modal('show');
	            });

	        }]);

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Dialog.Embed',[])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Dialog.Embed.Controller',

	        ['$scope', function($scope) {



	        }]);

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Dialog.Login',[])

	  ///////////////////////////////////////////////////////////////////////////
	  //
	  //
	  ///////////////////////////////////////////////////////////////////////////
	  .controller('Autodesk.ADN.AngularView.Dialog.Login.Controller',

	  ['$scope', '$location', function($scope, $location) {

	    $scope.onFacebookLogin = function () {

	      window.location = "http://" +
	        window.location.host +
	        config.host + '/api/auth/facebook';
	    }

	    $scope.onGoogleLogin = function () {

	      window.location = "http://" +
	        window.location.host +
	        config.host + '/api/auth/google';
	    }

	    $scope.onGitHubLogin = function () {

	      window.location = "http://" +
	      window.location.host +
	      config.host + '/api/auth/github';
	    }

	    $scope.onLinkedInLogin = function () {

	      window.location = "http://" +
	      window.location.host +
	      config.host + '/api/auth/linkedin';
	    }

	    $scope.$on('app.onLogin', function (event, data) {

	      $scope.caption = data.caption;

	      $('#loginDlg').modal('show');
	    });

	  }]);

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Dialog.Models',[])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Dialog.Models.Controller',

	        ['$scope', '$location', 'Model', 'Thumbnail',
	            function($scope, $location, Model, Thumbnail) {

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.searchFilter = function (model) {

	                    var regExp = new RegExp($scope.modelsFilterValue, 'i');

	                    return !$scope.modelsFilterValue ||
	                      regExp.test(model.name);
	                };

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                function loadModels() {

	                    Model.query(function(models) {

	                        models.forEach(function(model) {

	                            // set as default
	                            model.thumbnail = "img/adsk/adsk-128x128-32.png";

	                            $scope.models.push(model);

	                            Thumbnail.get({modelId:model._id},
	                              function(response){
	                                  model.thumbnail =
	                                    "data:image/png;base64," + response.thumbnail.data;
	                              });
	                        });
	                    });
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.$on('app.onModels', function (event, data) {

	                    $scope.source = data.source;

	                    $('#modelsDlg').modal('show');
	                });

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.onLoadModel = function(modelId) {

	                    $('#modelsDlg').modal('hide');

	                    $location.path($scope.source).search({id: modelId});
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.models = [];

	                loadModels();
	        }]);

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	var config = __webpack_require__(1);

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Navbar.AppNavbar',
	    [
	        'Autodesk.ADN.AngularView.Dialog.About'
	    ])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Navbar.AppNavbar.Controller',

	        ['$scope', '$http', '$location', 'AppState',
	            function($scope, $http, $location, AppState) {

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.onLogin = function() {

	                  if(AppState.isAuthenticated) {

	                      $scope.logStatus = "Logging out ...";

	                      $http.get(config.host + '/api/auth/logout').
	                        success(function(res) {
	                            $scope.logStatus = "Login";
	                            AppState.isAuthenticated = false;
	                        });
	                  }
	                  else {

	                      $scope.$emit('app.onModal', {
	                          dlgId: '#loginDlg',
	                          caption: 'Log in with social media ...'
	                      });
	                  }
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                function initialize() {

	                    $scope.logStatus = "";

	                    $scope.brand = "Autodesk";

	                    $scope.brandImg = "img/adsk/adsk-32x32-32.png";

	                    $scope.aboutItems = [
	                        {
	                            text: 'Get an API key',
	                            href: 'http://developer.autodesk.com',
	                            icon: 'vpn_key',
	                            style: 'fill: rgba(0, 0, 0, 0.6)',
	                            size: '15'
	                        },
	                        {
	                            text: 'API Support',
	                            href: 'http://forums.autodesk.com/t5/Web-Services-API/ct-p/94',
	                            icon: 'thumb_up',
	                            style: 'fill: rgba(0, 0, 0, 0.6)',
	                            size: '15'
	                        },
	                        {
	                            text: 'Autodesk',
	                            href: 'http://www.autodesk.com',
	                            icon: 'spellcheck',
	                            style: 'fill: rgba(0, 0, 0, 0.6)',
	                            size: '15'
	                        },
	                        {
	                            class: 'divider'
	                        },
	                        {
	                            text: 'Source on Github',
	                            href: 'https://github.com/Developer-Autodesk/ng-gallery',
	                            icon: 'star',
	                            style: 'fill: rgba(0, 0, 0, 0.6)',
	                            size: '15'
	                        },
	                        {
	                            text: 'About that sample',
	                            href: '',
	                            icon: 'info_outline',
	                            style: 'fill: rgba(0, 0, 0, 0.6)',
	                            size: '15',
	                            onClick: function() {
	                                $scope.$emit('app.onModal', {
	                                    dlgId: '#aboutDlg'
	                                });
	                            }
	                        }
	                    ]

	                    ///////////////////////////////////////////////////////////////////
	                    //
	                    //
	                    ///////////////////////////////////////////////////////////////////
	                    $http.get(config.host + '/api/auth/isauthenticated').
	                      success(function (response) {

	                          AppState.isAuthenticated = (response.user !== null);

	                          if(AppState.isAuthenticated) {

	                              switch(response.user.type) {
	                                  case 'facebook':
	                                      $scope.logStatus = response.user.facebook.name;
	                                        break;
	                                  case 'google':
	                                      $scope.logStatus = response.user.google.name;
	                                      break;
	                                  case 'github':
	                                      $scope.logStatus = response.user.github.name;
	                                      break;
	                                  case 'linkedin':
	                                      $scope.logStatus = response.user.linkedin.name;
	                                      break;
	                              };

	                              $scope.logStatus += ' (Logout)';
	                          }
	                          else {
	                              $scope.logStatus = "Login";
	                          }
	                      });
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.onReload = function(source) {

	                    $scope.$emit('app.onModal', {
	                        dlgId: '#modelsDlg',
	                        source: source
	                    });
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                $scope.activeView = function() {

	                    return AppState.activeView;
	                }

	                ///////////////////////////////////////////////////////////////////
	                //
	                //
	                ///////////////////////////////////////////////////////////////////
	                initialize();
	        }]);

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Autodesk.ADN.Viewing.Extension.ExtensionManager
	// by Philippe Leefsma, May 2015
	//
	///////////////////////////////////////////////////////////////////////////////
	AutodeskNamespace("Autodesk.ADN.Viewing.Extension");

	Autodesk.ADN.Viewing.Extension.ExtensionManager = function (viewer, options) {

	    Autodesk.Viewing.Extension.call(this, viewer, options);

	    var _panelBaseId = newGUID();

	    var _extensionsMap = {};

	    var _viewer = viewer;

	    var _panel = null;

	    var _this = this;

	    /////////////////////////////////////////////////////////
	    //
	    //
	    //////////////////////////////////////////////////////////
	    _this.load = function () {

	        var ctrlGroup = _this.getGalleryControlGroup();

	        _this.createControls(ctrlGroup);

	        _panel = new Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel(
	          _viewer.container,
	          _panelBaseId);

	        $.get(options.apiUrl , function(extensions){

	            initStorage(extensions);

	            _extensionsMap = _this.initializeExtensions(
	              extensions);
	        });

	        console.log('Autodesk.ADN.Viewing.Extension.ExtensionManager loaded');

	        return true;
	    };

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    _this.unload = function () {

	        console.log('Autodesk.ADN.Viewing.Extension.ExtensionManager unloaded');

	        return true;
	    };

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    _this.initializeExtensions = function(extensions) {

	        var extensionsMap = {};

	        extensions.forEach(function(extension){

	            //hidden extensions start with '_'
	            if(!extension.id.startsWith('_')) {

	                extension.handler = function() {

	                    extension.enabled = !extension.enabled;

	                    storeExtensionState(extension);

	                    if(extension.enabled) {

	                        $('#' + extension.itemId).addClass('enabled');

	                        loadExtension(extension);
	                    }
	                    else {

	                        $('#' + extension.itemId).removeClass('enabled');

	                        viewer.unloadExtension(extension.id);
	                    }
	                }

	                extension.itemId = newGUID();

	                extension.enabled = getExtensionState(extension);

	                if(extension.enabled) {

	                    loadExtension(extension);
	                }

	                extensionsMap[extension.id] = extension;
	            }
	        });

	        return extensionsMap;
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    _this.getGalleryControlGroup = function() {

	        var viewerToolbar = _viewer.getToolbar(true);

	        var galleryControls = viewerToolbar.getControl(
	            'Autodesk.ADN.Gallery.ControlGroup');

	        if(!galleryControls) {

	            galleryControls = new Autodesk.Viewing.UI.ControlGroup(
	                'Autodesk.ADN.Gallery.ControlGroup');

	            viewerToolbar.addControl(galleryControls);
	        }

	       return galleryControls;
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    _this.createControls = function(parentGroup) {

	        var btn = createButton(
	            'Autodesk.ADN.Gallery.ExtensionManager.Button.Manage',
	            'glyphicon glyphicon-plus',
	            'Manage Extensions',
	            _this.onExtensionManagerClicked);

	        parentGroup.addControl(btn);
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    _this.onExtensionManagerClicked = function() {

	        _panel.setVisible(true);

	        _extensionsMap = {};

	        $.get(options.apiUrl , function(extensions){

	            _panel.clearExtensions();

	            initStorage(extensions);

	            _extensionsMap = _this.initializeExtensions(
	              extensions);

	            for(var extensionId in _extensionsMap) {

	                _panel.addExtension(_extensionsMap[extensionId]);
	            }
	        });
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function createButton(id, className, tooltip, handler) {

	        var button = new Autodesk.Viewing.UI.Button(id);

	        //button.icon.style.backgroundImage = imgUrl;
	        button.icon.className = className;

	        button.icon.style.fontSize = "24px";

	        button.setToolTip(tooltip);

	        button.onClick = handler;

	        return button;
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function newGUID() {

	        var d = new Date().getTime();

	        var guid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(
	          /[xy]/g,
	          function (c) {
	              var r = (d + Math.random() * 16) % 16 | 0;
	              d = Math.floor(d / 16);
	              return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
	          });

	        return guid;
	    };

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function initStorage(extensions) {

	        //window.localStorage.clear();

	        if(!localStorage['gallery.extensions']) {

	            localStorage['gallery.extensions'] = JSON.stringify({});
	        }

	        var storageObj = JSON.parse(localStorage['gallery.extensions']);

	        extensions.forEach(function(extension) {

	            if(!storageObj[extension.id]) {

	                storageObj[extension.id] = false;
	            }
	        });

	        localStorage['gallery.extensions'] = JSON.stringify(storageObj);
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function getExtensionState(extension) {

	        var storageObj = JSON.parse(
	          localStorage['gallery.extensions']);

	        return storageObj[extension.id];
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function storeExtensionState(extension) {

	        var storageObj = JSON.parse(localStorage['gallery.extensions']);

	        storageObj[extension.id] = extension.enabled;

	        localStorage['gallery.extensions'] = JSON.stringify(storageObj);
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    function loadExtension(extension) {

	        $.getScript(options.extensionsUrl +'/' +
	          extension.id + '/' + extension.file)

	          .done(function () {

	              viewer.loadExtension(extension.id);
	          })
	          .fail(function (jqxhr, settings, exception) {
	              console.log("Load failed: " + extension.file);
	          });
	    }

	    /////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////
	    Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel = function(
	      parentContainer,
	      baseId)
	    {
	        this.content = document.createElement('div');

	        this.content.id = baseId + 'PanelContentId';
	        this.content.className = 'extension-manager-panel-content';

	        Autodesk.Viewing.UI.DockingPanel.call(
	          this,
	          parentContainer,
	          baseId,
	          "Extensions Manager",
	          {shadow:true});

	        this.container.style.top = "0px";
	        this.container.style.left = "0px";

	        this.container.style.width = "300px";
	        this.container.style.height = "400px";

	        this.container.style.resize = "auto";

	        var html = [
	            '<div class="extension-manager-panel-container" style="z-index: 1000">',
	                '<div id="' + baseId + 'PanelContainerId" class="list-group extension-manager-panel-list-container">',
	                '</div>',
	            '</div>'
	        ].join('\n');

	        $('#' + baseId + 'PanelContentId').html(html);

	        this.addExtension = function(extension) {

	            var srcUrl = options.extensionsUrl + '/' + extension.id + '/' + extension.file;

	            var html = [

	                '<div class="row extension-manager-panel-row">',
	                    '<a class="list-group-item extension-manager-panel-list-group-item col-md-6" id=' + extension.itemId + '>',
	                        '<p class="list-group-item-text">',
	                            extension.name,
	                        '</p>',
	                    '</a>',

	                    '<a href="' + srcUrl + '" class="list-group-item extension-manager-panel-list-group-item-src col-md-2" target=_blank>',
	                        '<p class="list-group-item-text">',
	                            'Source',
	                        '</p>',
	                    '</a>',
	                '</div>',

	            ].join('\n');

	            $('#' + baseId + 'PanelContainerId').append(html);

	            $('#' + extension.itemId).click(extension.handler);

	            $('#' + extension.itemId + 'src').click(extension.handlerSrc);

	            if(extension.enabled) {
	                $('#' + extension.itemId).addClass('enabled');
	            }
	        }

	        this.clearExtensions = function () {

	            $('#' + baseId + 'PanelContainerId > div').each(
	              function (idx, child) {
	                  $(child).remove();
	              }
	            )
	        }
	    };

	    Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel.prototype = Object.create(
	      Autodesk.Viewing.UI.DockingPanel.prototype);

	    Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel.prototype.constructor =
	      Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel;

	    Autodesk.ADN.Viewing.Extension.ExtensionManager.Panel.prototype.initialize = function()
	    {
	        // Override DockingPanel initialize() to:
	        // - create a standard title bar
	        // - click anywhere on the panel to move

	        this.title = this.createTitleBar(
	          this.titleLabel ||
	          this.container.id);

	        this.closer = this.createCloseButton();

	        this.container.appendChild(this.title);
	        this.title.appendChild(this.closer);
	        this.container.appendChild(this.content);

	        this.initializeMoveHandlers(this.title);
	        this.initializeCloseHandler(this.closer);
	    };

	    var css = [

	        'div.extension-manager-panel-content {',
	            'height: calc(100% - 25px);',
	        '}',

	            'div.extension-manager-panel-container {',
	            'height: calc(100% - 25px);',
	            'margin: 10px;',
	        '}',

	        'div.extension-manager-panel-controls-container {',
	            'margin-bottom: 10px;',
	        '}',

	        'div.extension-manager-panel-list-container {',
	            'height: calc(100% - 25px);',
	            'overflow-y: auto;',
	        '}',

	        'a.extension-manager-panel-list-group-item {',
	            'color: #FFFFFF;',
	            'background-color: #3F4244;',
	            'margin-bottom: 5px;',
	            'border-radius: 4px;',
	        '}',

	        'a.extension-manager-panel-list-group-item-src {',
	            'color: #FFFFFF;',
	            'background-color: #3F4244;',
	            'margin-bottom: 5px;',
	            'width: 45px;',
	            'border-radius: 4px;',
	        '}',

	        'a.extension-manager-panel-list-group-item:hover {',
	            'color: #FFFFFF;',
	            'background-color: #5BC0DE;',
	        '}',

	        'a.extension-manager-panel-list-group-item.enabled {',
	            'color: #000000;',
	            'background-color: #00CC00;',
	        '}',

	        'div.extension-manager-panel-row {',
	            'margin-left: 0;',
	            'margin-right: 0;',
	        '}'

	    ].join('\n');

	    $('<style type="text/css">' + css + '</style>').appendTo('head');
	};

	Autodesk.ADN.Viewing.Extension.ExtensionManager.prototype =
	  Object.create(Autodesk.Viewing.Extension.prototype);

	Autodesk.ADN.Viewing.Extension.ExtensionManager.prototype.constructor =
	  Autodesk.ADN.Viewing.Extension.ExtensionManager;

	Autodesk.Viewing.theExtensionManager.registerExtension(
	  'Autodesk.ADN.Viewing.Extension.ExtensionManager',
	  Autodesk.ADN.Viewing.Extension.ExtensionManager);



/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Autodesk.ADN.Viewing.Extension.AnimationManager
	// by Philippe Leefsma, May 2015
	//
	///////////////////////////////////////////////////////////////////////////////
	AutodeskNamespace("Autodesk.ADN.Viewing.Extension");

	Autodesk.ADN.Viewing.Extension.AnimationManager = function (viewer, options) {

	  Autodesk.Viewing.Extension.call(this, viewer, options);

	  var _this = this;

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  _this.load = function () {

	    var ctrlGroup = getGalleryControlGroup();

	    createControls(ctrlGroup);

	    _this.tool = new AnimationTool(viewer);

	    viewer.toolController.registerTool(_this.tool);

	    console.log('Autodesk.ADN.Viewing.Extension.AnimationManager loaded');

	    return true;
	  };

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  _this.unload = function () {

	    console.log('Autodesk.ADN.Viewing.Extension.AnimationManager unloaded');

	    return true;
	  };

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function getGalleryControlGroup() {

	    var toolbar = viewer.getToolbar(true);

	    var galleryControls = toolbar.getControl(
	      'Autodesk.ADN.Gallery.ControlGroup');

	    if(!galleryControls) {

	      galleryControls = new Autodesk.Viewing.UI.ControlGroup(
	        'Autodesk.ADN.Gallery.ControlGroup');

	      toolbar.addControl(galleryControls);
	    }

	    return galleryControls;
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function createControls(parentGroup) {

	    var combo = new Autodesk.Viewing.UI.ComboButton(
	      'Autodesk.ADN.Gallery.AnimationManager.Combo');

	    //combo.arrowButton.setToolTip('Animations');
	    combo.setToolTip('Animations');

	    combo.icon.style.fontSize = "24px";
	    combo.icon.className = 'glyphicon glyphicon-facetime-video';

	    combo.arrowButton.icon.style.padding = "5px 320px 0px 0px";

	    var explodeBtn = createButton(
	      'Autodesk.ADN.Gallery.AnimationManager.Button.Explode',
	      'glyphicon glyphicon-certificate',
	      'Explode',
	      onExplodeClicked);

	    var rotateBtn = createButton(
	      'Autodesk.ADN.Gallery.AnimationManager.Button.Rotate',
	      'glyphicon glyphicon-repeat',
	      'Rotate',
	      onRotateClicked);

	    var cancelBtn = createButton(
	      'Autodesk.ADN.Gallery.AnimationManager.Button.Cancel',
	      'glyphicon glyphicon-remove-circle',
	      'Cancel Animations',
	      onCancelClicked);

	    combo.addControl(explodeBtn);
	    combo.addControl(rotateBtn);
	    combo.addControl(cancelBtn);

	    parentGroup.addControl(combo);
	    parentGroup.addControl(combo.arrowButton);
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function onExplodeClicked() {

	    viewer.toolController.activateTool(_this.tool.getName());

	    _this.tool.startExplodeMotion(0.2, 0.1, 1.5);
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function onRotateClicked() {

	    viewer.toolController.activateTool(_this.tool.getName());

	    var worldUp = viewer.navigation.getWorldUpVector();

	    _this.tool.startRotateMotion(0.3,
	      {
	        x:worldUp.x,
	        y:worldUp.y,
	        z:worldUp.z
	      });
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function onCancelClicked() {

	    viewer.toolController.deactivateTool(_this.tool.getName());
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function createButton(id, className, tooltip, handler) {

	    var button = new Autodesk.Viewing.UI.Button(id);

	    button.icon.className = className;

	    button.icon.style.fontSize = "24px";

	    button.setToolTip(tooltip);

	    button.onClick = handler;

	    return button;
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function newGUID() {

	    var d = new Date().getTime();

	    var guid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(
	      /[xy]/g,
	      function (c) {
	        var r = (d + Math.random() * 16) % 16 | 0;
	        d = Math.floor(d / 16);
	        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
	      });

	    return guid;
	  };

	  /////////////////////////////////////////////////////////////////
	  // The animation tool
	  //
	  /////////////////////////////////////////////////////////////////
	  function AnimationTool(viewer) {

	    var _tool = this;

	    _tool.motionCallbacks = {};

	    this.getNames = function() {

	      return ["Autodesk.ADN.Viewing.Tool.AnimationTool"];
	    };

	    this.getName = function() {

	      return "Autodesk.ADN.Viewing.Tool.AnimationTool";
	    };

	    /////////////////////////////////////////////////////////////
	    // called when tool is activated
	    //
	    /////////////////////////////////////////////////////////////
	    this.activate = function(name) {

	      _tool.initialState = {
	        scale: viewer.getExplodeScale(),
	        position: viewer.navigation.getPosition()
	      }

	      _tool.lastTime = -1;
	    };

	    /////////////////////////////////////////////////////////////
	    // called when tool is deactivated
	    //
	    /////////////////////////////////////////////////////////////
	    this.deactivate = function(name) {

	      viewer.explode(_tool.initialState.scale);

	      viewer.navigation.setPosition(
	        new THREE.Vector3(
	          _tool.initialState.position.x,
	          _tool.initialState.position.y,
	          _tool.initialState.position.z
	        ));

	      _tool.motionCallbacks = {};
	    };

	    /////////////////////////////////////////////////////////////
	    // update is called by the framework
	    // t: time elapsed since tool activated in ms
	    /////////////////////////////////////////////////////////////
	    this.update = function(t) {

	      var dt = elapsed(t);

	      for(var motionId in  _tool.motionCallbacks){

	        _tool.motionCallbacks[motionId](dt);
	      }

	      return false;
	    };

	    /////////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////////
	    function elapsed(t) {

	      if(_tool.lastTime < 0) {
	        _tool.lastTime = t;
	      }

	      var elapsed = t - _tool.lastTime;

	      _tool.lastTime = t;

	      return elapsed;
	    }

	    /////////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////////
	    this.startExplodeMotion = function(speed, min, max) {

	      var scale = min;

	      _tool.motionCallbacks['explode'] = function (elapsed) {

	        scale += speed * 0.001 * elapsed;

	        if (scale > max) {

	          scale = max;
	          speed = -speed;
	        }

	        else if (scale < min) {

	          scale = min;
	          speed = -speed;
	        }

	        viewer.explode(scale);
	      }
	    }

	    this.stopExplodeMotion = function () {

	      delete _tool.motionCallbacks['explode'];
	    }

	    /////////////////////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////////////////////
	    this.startRotateMotion = function (speed, axis) {

	      _tool.motionCallbacks['rotate'] = function (elapsed) {

	          var pos = viewer.navigation.getPosition();

	          var position = new THREE.Vector3(
	            pos.x,
	            pos.y,
	            pos.z
	          );

	          var rAxis = new THREE.Vector3(
	            axis.x, axis.y, axis.z
	          );

	          var matrix = new THREE.Matrix4().makeRotationAxis(
	            rAxis,
	            speed * 0.001 * elapsed);

	          position.applyMatrix4(matrix);

	          viewer.navigation.setPosition(position);
	      };

	      this.stopRotateMotion = function () {

	        delete _tool.motionCallbacks['rotate'];
	      }
	    }
	  }
	};

	Autodesk.ADN.Viewing.Extension.AnimationManager.prototype =
	  Object.create(Autodesk.Viewing.Extension.prototype);

	Autodesk.ADN.Viewing.Extension.AnimationManager.prototype.constructor =
	  Autodesk.ADN.Viewing.Extension.AnimationManager;

	Autodesk.Viewing.theExtensionManager.registerExtension(
	  'Autodesk.ADN.Viewing.Extension.AnimationManager',
	  Autodesk.ADN.Viewing.Extension.AnimationManager);



/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Autodesk.ADN.Viewing.Extension.ExtensionManager
	// by Philippe Leefsma, May 2015
	//
	///////////////////////////////////////////////////////////////////////////////
	AutodeskNamespace("Autodesk.ADN.Viewing.Extension");

	Autodesk.ADN.Viewing.Extension.StateManager = function (viewer, options) {

	    Autodesk.Viewing.Extension.call(this, viewer, options);

	    var _panelBaseId = newGUID();

	    var _viewer = viewer;

	    var _panel = null;

	    var _this = this;

	    //the dragula object
	    var _drake = null;

	    var _stateMap = {};

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    _this.load = function () {

	        var ctrlGroup = _this.getGalleryControlGroup();

	        _this.createControls(ctrlGroup);

	        _panel = new Autodesk.ADN.Viewing.Extension.StateManager.Panel(
	          _viewer.container,
	          _panelBaseId);

	        console.log('Autodesk.ADN.Viewing.Extension.StateManager loaded');

	        return true;
	    };

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    _this.unload = function () {

	        console.log('Autodesk.ADN.Viewing.Extension.StateManager unloaded');

	        return true;
	    };

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    _this.getGalleryControlGroup = function() {

	        var viewerToolbar = _viewer.getToolbar(true);

	        var galleryControls = viewerToolbar.getControl(
	            'Autodesk.ADN.Gallery.ControlGroup');

	        if(!galleryControls) {

	            galleryControls = new Autodesk.Viewing.UI.ControlGroup(
	                'Autodesk.ADN.Gallery.ControlGroup');

	            viewerToolbar.addControl(galleryControls);
	        }

	       return galleryControls;
	    }

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    _this.createControls = function(parentGroup) {

	        var btn = createButton(
	            'Autodesk.ADN.Gallery.StateManager.Button.Manage',
	            'glyphicon glyphicon-list',
	            'Manage States',
	            _this.onStateManagerClicked);

	        parentGroup.addControl(btn);
	    }

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    _this.onStateManagerClicked = function() {

	        _panel.setVisible(true);

	        _stateMap = {};

	        $.get(options.apiUrl, function(states) {

	            _panel.clearStates();

	            states.forEach(function(stateStr) {

	                var state = JSON.parse(stateStr);

	                _panel.addState(state);
	            });
	        });
	    }

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    function createButton(id, className, tooltip, handler) {

	        var button = new Autodesk.Viewing.UI.Button(id);

	        //button.icon.style.backgroundImage = imgUrl;
	        button.icon.className = className;

	        button.icon.style.fontSize = "24px";

	        button.setToolTip(tooltip);

	        button.onClick = handler;

	        return button;
	    }

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    function newGUID() {

	        var d = new Date().getTime();

	        var guid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(
	          /[xy]/g,
	          function (c) {
	              var r = (d + Math.random() * 16) % 16 | 0;
	              d = Math.floor(d / 16);
	              return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
	          });

	        return guid;
	    };

	    /////////////////////////////////////////////
	    //
	    //
	    /////////////////////////////////////////////
	    Autodesk.ADN.Viewing.Extension.StateManager.Panel = function(
	      parentContainer,
	      baseId) {

	        var _this = this;

	        var _sequenceIndex = 0;

	        var _sequenceRunning = false;

	        this.content = document.createElement('div');

	        this.content.id = baseId + 'PanelContentId';
	        this.content.className = 'state-manager-panel-content';

	        Autodesk.Viewing.UI.DockingPanel.call(
	          this,
	          parentContainer,
	          baseId,
	          "States Manager",
	          {shadow: true});

	        this.container.style.right = "0px";
	        this.container.style.top = "0px";

	        this.container.style.width = "380px";
	        this.container.style.height = "400px";

	        this.container.style.resize = "auto";

	        var html = [
	            '<div class="state-manager-panel-container">',
	                '<div class="state-manager-panel-controls-container">',
	                    '<div>',
	                    '<button class="btn btn-info" id="' + baseId + 'saveStateBtn">',
	                        '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Save State',
	                    '</button>',
	                    '<input class="state-manager-panel-input" type="text" placeholder=" Name (default: Date/Time)" id="' + baseId + 'stateName">',
	                    '</div>',
	                    '<br>',
	                    '<div>',
	                    '<button class="btn btn-info" id="' + baseId + 'playSequenceBtn" style="width:86px;">',
	                        '<span class="glyphicon glyphicon-play" aria-hidden="true"></span> <label> Play </label>',
	                    '</button>',
	                    '<input class="state-manager-panel-input" type="text" placeholder=" Period (sec / default:1sec) " id="' + baseId + 'period">',
	                    '</div>',
	                    '<br>',
	                    '<label class="state-manager-panel-label"><input id="' + baseId + 'EditCbId" type="checkbox" name="checkbox" value="value"> Edit States</label>',
	                '</div>',
	                '<div id="' + baseId + 'PanelContainerId" class="list-group state-manager-panel-list-container">',
	                '</div>',
	            '</div>'

	        ].join('\n');

	        $('#' + baseId + 'PanelContentId').html(html);

	        /////////////////////////////////////////////
	        //
	        //
	        /////////////////////////////////////////////
	        $('#' + baseId + 'EditCbId').change(function () {

	            if (this.checked) {

	                _drake = dragula(
	                  [$('#' + baseId + 'PanelContainerId')[0]],
	                  {removeOnSpill: true});

	                _drake.on('remove', function (element, container) {

	                    delete _stateMap[element.id];

	                    $.ajax({
	                        url: options.apiUrl + '/' + element.id,
	                        type: 'DELETE',
	                        success: function () {
	                            console.log('delete ok')
	                        },
	                        error: function () {
	                            console.log('delete ko')
	                        }
	                    });
	                })
	            }
	            else {

	                _drake.destroy();
	            }
	        });

	        /////////////////////////////////////////////
	        //
	        //
	        /////////////////////////////////////////////
	        $('#' + baseId + 'saveStateBtn').click(function(){

	            var name =  $('#' + baseId + 'stateName').val();

	            var stateFilter = {
	              guid: true,
	              seedURN: false,
	              objectSet: true,
	              viewport: true,
	              renderOptions: false
	            };

	            var state = viewer.getState(stateFilter);

	            state.name = (name.length ?
	              name : new Date().toString('d/M/yyyy H:mm:ss'));

	            var data = {
	                state: JSON.stringify(state)
	            }

	            $.ajax({
	                url: options.apiUrl,
	                type: 'PUT',
	                data: data,
	                success: function () {
	                    _this.addState(state);
	                },
	                error: function () {
	                   console.log('Error PUT: ' + url);
	                }
	            });
	        });

	        /////////////////////////////////////////////
	        //
	        //
	        /////////////////////////////////////////////
	        $('#' + baseId + 'playSequenceBtn').click(function(){

	            _sequenceRunning = !_sequenceRunning;

	            if(_sequenceRunning){

	                $('#' + baseId + 'playSequenceBtn > label').text(" Pause");
	                $('#' + baseId + 'playSequenceBtn > span').removeClass("glyphicon-play");
	                $('#' + baseId + 'playSequenceBtn > span').addClass("glyphicon-pause");

	                var period = parseInt($('#' + baseId + 'period').val());

	                period = (isNaN(period) ? 1.0 : period);

	                var stateItems = $('#' + baseId + 'PanelContainerId > div');

	                function restoreState() {

	                    if(_sequenceIndex < stateItems.length) {

	                        if(_sequenceRunning) {

	                            if(_sequenceIndex > 0) {
	                              $(stateItems[_sequenceIndex-1]).removeClass('enabled');
	                            }

	                            $(stateItems[_sequenceIndex]).addClass('enabled');

	                            var state = _stateMap[stateItems[_sequenceIndex].id];

	                            _viewer.restoreState(state);

	                            ++_sequenceIndex;

	                            setTimeout(restoreState, period * 1000.0);
	                        }
	                    }
	                    else {

	                        //end of sequence -> reset
	                        $(stateItems[_sequenceIndex-1]).removeClass('enabled');
	                        _sequenceIndex = 0;
	                        _sequenceRunning = false;
	                        $('#' + baseId + 'playSequenceBtn > label').text(" Play");
	                        $('#' + baseId + 'playSequenceBtn > span').removeClass("glyphicon-pause");
	                        $('#' + baseId + 'playSequenceBtn > span').addClass("glyphicon-play");
	                    }
	                }

	                restoreState();
	            }
	            else {

	                $('#' + baseId + 'playSequenceBtn > label').text(" Play");
	                $('#' + baseId + 'playSequenceBtn > span').removeClass("glyphicon-pause");
	                $('#' + baseId + 'playSequenceBtn > span').addClass("glyphicon-play");
	            }
	        });

	        /////////////////////////////////////////////
	        //
	        //
	        /////////////////////////////////////////////
	        _this.addState = function (state) {

	            _stateMap[state.guid] = state;

	            var html = [

	                '<div class="list-group-item state-manager-panel-item" id="' + state.guid + '">',
	                state.name,
	                '</div>'

	            ].join('\n');

	            $('#' + baseId + 'PanelContainerId').append(html);

	            $('#' + state.guid).click(function () {

	                _viewer.restoreState(_stateMap[state.guid]);
	            });
	        }

	        /////////////////////////////////////////////
	        //
	        //
	        /////////////////////////////////////////////
	        _this.clearStates = function () {

	            $('#' + baseId + 'PanelContainerId > div').each(
	              function (idx, child) {
	                  $(child).remove();
	              }
	            )
	        }
	    };

	    Autodesk.ADN.Viewing.Extension.StateManager.Panel.prototype = Object.create(
	      Autodesk.Viewing.UI.DockingPanel.prototype);

	    Autodesk.ADN.Viewing.Extension.StateManager.Panel.prototype.constructor =
	      Autodesk.ADN.Viewing.Extension.StateManager.Panel;

	    Autodesk.ADN.Viewing.Extension.StateManager.Panel.prototype.initialize = function()
	    {
	        // Override DockingPanel initialize() to:
	        // - create a standard title bar
	        // - click anywhere on the panel to move

	        this.title = this.createTitleBar(
	          this.titleLabel ||
	          this.container.id);

	        this.closer = this.createCloseButton();

	        this.container.appendChild(this.title);
	        this.title.appendChild(this.closer);
	        this.container.appendChild(this.content);

	        this.initializeMoveHandlers(this.title);
	        this.initializeCloseHandler(this.closer);
	    };

	    var css = [

	        'div.state-manager-panel-content {',
	            'height: calc(100% - 70px);',
	        '}',

	        'div.state-manager-panel-container {',
	            'height: calc(100% - 70px);',
	            'margin: 10px;',
	        '}',

	        'div.state-manager-panel-controls-container {',
	            'margin-bottom: 10px;',
	        '}',

	        'div.state-manager-panel-list-container {',
	            'height: calc(100% - 70px);',
	            'overflow-y: auto;',
	        '}',

	        'div.state-manager-panel-item {',
	            'margin-left: 0;',
	            'margin-right: 0;',
	            'color: #FFFFFF;',
	            'background-color: #3F4244;',
	            'margin-bottom: 5px;',
	            'border-radius: 4px;',
	        '}',

	        'div.state-manager-panel-item:hover {',
	            'background-color: #5BC0DE;',
	        '}',

	        'div.state-manager-panel-item.enabled {',
	          'background-color: #5BC0DE;',
	        '}',

	        'label.state-manager-panel-label {',
	            'color: #FFFFFF;',
	        '}',

	        'input.state-manager-panel-input {',
	            'height: 30px;',
	            'width: 60%;',
	            'border-radius: 5px;',
	        '}'

	    ].join('\n');

	    $('<style type="text/css">' + css + '</style>').appendTo('head');
	};

	Autodesk.ADN.Viewing.Extension.StateManager.prototype =
	  Object.create(Autodesk.Viewing.Extension.prototype);

	Autodesk.ADN.Viewing.Extension.StateManager.prototype.constructor =
	  Autodesk.ADN.Viewing.Extension.StateManager;

	Autodesk.Viewing.theExtensionManager.registerExtension(
	  'Autodesk.ADN.Viewing.Extension.StateManager',
	  Autodesk.ADN.Viewing.Extension.StateManager);



/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Autodesk.ADN.Viewing.Extension.AnimationManager
	// by Philippe Leefsma, May 2015
	//
	///////////////////////////////////////////////////////////////////////////////
	AutodeskNamespace("Autodesk.ADN.Viewing.Extension");

	Autodesk.ADN.Viewing.Extension.EmbedManager = function (viewer, options) {

	  Autodesk.Viewing.Extension.call(this, viewer, options);

	  var _this = this;

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  _this.load = function () {

	    var ctrlGroup = getGalleryControlGroup();

	    createControls(ctrlGroup);

	    console.log('Autodesk.ADN.Viewing.Extension.EmbedManager loaded');

	    return true;
	  };

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  _this.unload = function () {

	    console.log('Autodesk.ADN.Viewing.Extension.EmbedManager unloaded');

	    return true;
	  };

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function getGalleryControlGroup() {

	    var toolbar = viewer.getToolbar(true);

	    var galleryControls = toolbar.getControl(
	      'Autodesk.ADN.Gallery.ControlGroup');

	    if(!galleryControls) {

	      galleryControls = new Autodesk.Viewing.UI.ControlGroup(
	        'Autodesk.ADN.Gallery.ControlGroup');

	      toolbar.addControl(galleryControls);
	    }

	    return galleryControls;
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function createControls(parentGroup) {

	    var btn = createButton(
	      'Autodesk.ADN.Gallery.EmbedManager.Button.Manage',
	      'url(img/embed.png)',
	      'Embed',
	      onEmbedClicked);

	    parentGroup.addControl(btn);
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function createButton(id, imgUrl, tooltip, handler) {

	    var button = new Autodesk.Viewing.UI.Button(id);

	    button.icon.style.backgroundImage = imgUrl;

	    button.icon.style.bottom = "3px";

	    button.setToolTip(tooltip);

	    button.onClick = handler;

	    return button;
	  }

	  /////////////////////////////////////////////////////////
	  //
	  //
	  /////////////////////////////////////////////////////////
	  function onEmbedClicked() {

	    $('#embedDlg').modal('show');
	  }
	};

	Autodesk.ADN.Viewing.Extension.EmbedManager.prototype =
	  Object.create(Autodesk.Viewing.Extension.prototype);

	Autodesk.ADN.Viewing.Extension.EmbedManager.prototype.constructor =
	  Autodesk.ADN.Viewing.Extension.EmbedManager;

	Autodesk.Viewing.theExtensionManager.registerExtension(
	  'Autodesk.ADN.Viewing.Extension.EmbedManager',
	  Autodesk.ADN.Viewing.Extension.EmbedManager);



/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by leefsmp on 2/27/15.
	 */

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Navbar.ViewerNavbar',
	    [
	        'mgcrea.ngStrap.tooltip',
	        'mgcrea.ngStrap.helpers.parseOptions'
	    ])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Navbar.ViewerNavbar.Controller',

	        ['$scope', '$sce', function($scope, $sce) {

	            ///////////////////////////////////////////////////////////////////
	            //
	            //
	            ///////////////////////////////////////////////////////////////////
	            $scope.$watch('selectedLayoutMode', function() {

	                $scope.$emit(
	                    'viewer.layout-mode-changed',
	                    { selectedLayoutMode: $scope.selectedLayoutMode});
	            });

	            ///////////////////////////////////////////////////////////////////
	            //
	            //
	            ///////////////////////////////////////////////////////////////////
	            $scope.$watch('selectedItems', function() {

	                if(!$scope.selectedItems.length) {
	                    $scope.selectedLayoutMode = $scope.modes[0].value;
	                }

	                $scope.modeDisabled = !$scope.selectedItems.length;

	                $scope.$emit(
	                    'viewer.viewable-path-selected',
	                    { selectedItems: $scope.selectedItems});
	            });

	            ///////////////////////////////////////////////////////////////////
	            //
	            //
	            ///////////////////////////////////////////////////////////////////
	            $scope.$watch('searchInput', function() {

	                $scope.$emit(
	                  'viewer.search-input-modified',
	                  { searchInput: $scope.searchInput});
	            });

	            ///////////////////////////////////////////////////////////////////
	            //
	            //
	            ///////////////////////////////////////////////////////////////////
	            $scope.$on('viewer.viewable-path-loaded', function (event, data) {

	                data.pathInfoCollection.path3d.forEach(function(path3d) {

	                    $scope.items.push({
	                        value: path3d.path,
	                        label: $sce.trustAsHtml(path3d.name)
	                    });
	                });

	                data.pathInfoCollection.path2d.forEach(function(path2d) {

	                    $scope.items.push({
	                        value: path2d.path,
	                        label: $sce.trustAsHtml(path2d.name)
	                    });
	                });

	                if($scope.items.length) {
	                    $scope.modeDisabled = false;
	                }
	            });

	            ///////////////////////////////////////////////////////////////////
	            //
	            //
	            ///////////////////////////////////////////////////////////////////
	            $scope.modes = [
	                {
	                    value: 'VIEWER_LAYOUT_MODE_ROW_FITTED',
	                    label: $sce.trustAsHtml('Layout Mode: Row - Fitted')
	                },
	                {
	                    value: 'VIEWER_LAYOUT_MODE_ROW',
	                    label: $sce.trustAsHtml('Layout Mode: Row')
	                },
	                {
	                    value: 'VIEWER_LAYOUT_MODE_COLUMN_FITTED',
	                    label: $sce.trustAsHtml('Layout Mode: Column - Fitted')
	                }
	            ];

	            $scope.selectedLayoutMode = $scope.modes[0].value;

	            $scope.modeDisabled = false;

	            $scope.selectedItems = [];

	            $scope.searchInput = "";

	            $scope.items = [];
	    }]);







/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2015 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	angular.module('Autodesk.ADN.Toolkit.Viewer.Directive.Viewer', [])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .directive('adnViewerContainer', function () {

	        function link($scope, $element, $attributes) {

	            $scope.viewerFactory =
	                new Autodesk.ADN.Toolkit.Viewer.AdnViewerFactory(
	                    $attributes.url,
	                    ($attributes.hasOwnProperty('config') ?
	                        JSON.parse($attributes.config) :
	                        {}));

	            $attributes.$observe('urn', function(urn) {

	                if (urn.length) {

	                    $scope.viewerFactory.getViewablePath(
	                        urn,
	                        function (pathInfoCollection) {

	                            $scope.onViewablePath({
	                                pathInfoCollection: pathInfoCollection
	                            });
	                        },
	                        function (error) {
	                            $scope.onError({
	                                error: error
	                            })
	                        });
	                }
	            });
	        };

	        function controller ($scope) {

	            this.getViewerFactory = function() {

	                return $scope.viewerFactory;
	            }
	        }

	        return {

	            scope: {
	                url: '@',
	                urn: '@',
	                onViewablePath: '&',
	                onError: '&'
	            },

	            link: link,
	            replace: true,
	            restrict: 'E',
	            transclude: true,
	            controller: controller,
	            template: '<div style="overflow:auto;position:relative;{{style}}">'
	                + '<div ng-transclude></div><div/>'
	        };
	    })

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .directive('adnViewer', function () {

	        function postlink($scope, $element, $attributes, parentController) {

	            $scope.viewer = null;

	            $attributes.$observe('path', function(path) {

	                if (path.length) {

	                    $scope.viewerFactory = parentController.getViewerFactory();

	                    var config = ($attributes.hasOwnProperty('config') ?
	                      JSON.parse($attributes.config) : {});

	                    $scope.viewer = $scope.viewerFactory.createViewer(
	                      $element[0],
	                      config);

	                    $scope.viewer.id =
	                      $scope.viewer.container.parentElement.id;

	                    $scope.onViewerInitialized({
	                        viewer: $scope.viewer
	                    });

	                    $scope.viewer.load(path);

	                    $scope.$on('$destroy', function () {

	                        $scope.onDestroy({
	                            viewer: $scope.viewer
	                        });
	                    });
	                }
	            });
	        }

	        return {

	            scope: {

	                path: '@',
	                onDestroy: '&',
	                onViewerInitialized: '&',
	                onError: '&'
	            },
	            link: {
	                post: postlink
	            },
	            restrict: 'E',
	            replace: true,
	            require: '^adnViewerContainer',
	            template: '<div style="overflow:auto;position:relative;{{style}}"> <div/>'
	        };
	    });




/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	///////////////////////////////////////////////////////////////////////////////
	// Copyright (c) Autodesk, Inc. All rights reserved
	// Written by Philippe Leefsma 2014 - ADN/Developer Technical Services
	//
	// Permission to use, copy, modify, and distribute this software in
	// object code form for any purpose and without fee is hereby granted,
	// provided that the above copyright notice appears in all copies and
	// that both that copyright notice and the limited warranty and
	// restricted rights notice below appear in all supporting
	// documentation.
	//
	// AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
	// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
	// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
	// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
	// UNINTERRUPTED OR ERROR FREE.
	///////////////////////////////////////////////////////////////////////////////
	'use strict';

	///////////////////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////////////////
	angular.module('Autodesk.ADN.AngularView.Control.Treeview',
	    [
	        'treeControl',
	    ])

	    ///////////////////////////////////////////////////////////////////////////
	    //
	    //
	    ///////////////////////////////////////////////////////////////////////////
	    .controller('Autodesk.ADN.AngularView.Control.Treeview.Controller',

	        ['$scope', function($scope) {

	            $scope.viewer = null;

	            $scope.treeNodes = [];

	            $scope.treeOptions = {

	                nodeChildren: "children",
	                dirSelectable: true,
	                injectClasses: {
	                    ul: "a1",
	                    li: "a2",
	                    liSelected: "a7",
	                    iExpanded: "a3",
	                    iCollapsed: "a4",
	                    iLeaf: "a5",
	                    label: "a6",
	                    labelSelected: "a8"
	                }
	            }

	            $scope.onNodeSelected = function(node, selected) {

	                $scope.viewer.isolateById(node.id);

	                $scope.viewer.fitToView(node.id);
	            }

	            function loadTreeNodes(viewer, resultCallback) {

	                function createTreeNode(component) {

	                    var node = {

	                        'name': component.name,
	                        'id': component.dbId,
	                        'children': []
	                    }

	                    return node;
	                }

	                function loadTreeNodesRec(parentNode, component) {

	                    if (component.children) {

	                        var children = component.children;

	                        for (var i = 0; i < children.length; i++) {

	                            var childComponent = children[i];

	                            var childNode = createTreeNode(
	                                childComponent);

	                            parentNode.children.push(childNode);

	                            loadTreeNodesRec(childNode, childComponent);
	                        }
	                    }
	                }

	                viewer.getObjectTree(function (rootComponent) {

	                    if(rootComponent) {

	                        var rootNode = createTreeNode(
	                            rootComponent);

	                        loadTreeNodesRec(rootNode, rootComponent);

	                        var treeData = [rootNode];

	                        resultCallback(treeData);
	                    }
	                });
	            }

	            $scope.$on('viewer.geometry-loaded', function (event, data) {

	                loadTreeNodes(data.viewer, function (treeNodes) {

	                    $scope.viewer = data.viewer;

	                    $scope.treeNodes = treeNodes;

	                    $scope.expandedNodes = [$scope.treeNodes[0]];
	                })
	            });
	    }]);

/***/ }
/******/ ]);